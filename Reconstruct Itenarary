/*Reconstruct Itenarary
Example 1:

Input: [["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]
Output: ["JFK", "MUC", "LHR", "SFO", "SJC"]
Example 2:

Input: [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
Output: ["JFK","ATL","JFK","SFO","ATL","SFO"]
Explanation: Another possible reconstruction is ["JFK","SFO","ATL","JFK","ATL","SFO"].
             But it is larger in lexical order.
             */
//used dfs,multiset(sorting),stack(for element storing),map(0(1) saerch time for givenkey).

class Solution {
public:
    vector<string> findItinerary(vector<vector<string>>& tickets) {
        unordered_map<string,multiset<string>>adj;
        vector<string>ans;
        int n=tickets.size();
        //Make Graph
        
        for(int i=0;i<n;i++)
            adj[tickets[i][0]].insert(tickets[i][1]);
        
        stack<string>stk;
        stk.push("JFK");
        while(!stk.empty()){
            string src=stk.top();
            if(adj[src].size()==0)  // no furthur call
            {
                ans.push_back(src);
                stk.pop();
            }
            else{
                auto dst=adj[src].begin();
                stk.push(*dst);
                adj[src].erase(dst);
            }
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
};
